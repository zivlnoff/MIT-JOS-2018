+ ld obj/kern/kernel
/usr/bin/ld: warning: section `.bss' type changed to PROGBITS
+ mk obj/kern/kernel.img

lab1 start------------------------------------------------------------------------------------------------
6828 decimal is 15254 octal!
He110 World!
entering test_backtrace 5
entering test_backtrace 4
entering test_backtrace 3
entering test_backtrace 2
entering test_backtrace 1
entering test_backtrace 0
  ebp f011bf08  eip f0100078  args 00000000 00000000 00000000 f010004a f010092a
	      kern/init.c:21:  test_backtrace+56
  ebp f011bf28  eip f01000a1  args 00000000 00000001 f011bf68 f010004a f010092a
	      kern/init.c:21:  test_backtrace+97
  ebp f011bf48  eip f01000a1  args 00000001 00000002 f011bf88 f010004a f010092a
	      kern/init.c:21:  test_backtrace+97
  ebp f011bf68  eip f01000a1  args 00000002 00000003 f011bfa8 f010004a f010092a
	      kern/init.c:21:  test_backtrace+97
  ebp f011bf88  eip f01000a1  args 00000003 00000004 00000000 f010004a f010092a
	      kern/init.c:21:  test_backtrace+97
  ebp f011bfa8  eip f01000a1  args 00000004 00000005 00000000 f010004a f010092a
	      kern/init.c:21:  test_backtrace+97
  ebp f011bfc8  eip f0100121  args 00000005 0000e110 f011bfec 00000000 f010092a
	      kern/init.c:75:  i386_init+123
  ebp f011bff8  eip f010003e  args 00000003 00001003 00002003 00003003 f010092a
	      {standard input}:0:  <unknown>+0
leaving test_backtrace 0
leaving test_backtrace 1
leaving test_backtrace 2
leaving test_backtrace 3
leaving test_backtrace 4
leaving test_backtrace 5
lab1 end--------------------------------------------------------------------------------------------------

lab2 start------------------------------------------------------------------------------------------------
Physical memory: 0x20000K available	     base = 0x280K	     extended = 0x1fd80K
sizeof(uint16_t):0x2
npages:0x8000	     sizeof(Struct PageInfo):0x8
名称:kern_pgdir	     虚拟地址:0xf0192000	     页目录项:0x3c0	     物理地址:0x192000	     物理页:0x192
名称:UVPT	     虚拟地址:0xef400000	     页目录项:0x3bd	     物理地址:0x192000	     物理页:0x192
pages占用空间:256K
名称:pages	     虚拟地址:0xf0193000	     页目录项:0x3c0	     物理地址:0x193000	     物理页:0x193
sizeof(struct Env):0x60
envs take up memory:96K
名称:envs	     虚拟地址:0xf01d3000	     页目录项:0x3c0	     物理地址:0x1d3000	     物理页:0x1d3
qemu空闲物理内存:[0x1000, 0xa0000]	     [0x1eb000, 0x8000000)
初始page_free_list:0x0
名称:page_free_list	     虚拟地址:0xf01d2ff8	     页目录项:0x3c0	     物理地址:0x1d2ff8	     物理页:0x1d2

************* Now Check that the pages on the page_free_list are reasonable ************
pp:0x0	     pp1:0xf0194ff8	     pp2:0xf01d2ff8	     *tp[1]:0xf0194ff8	     *tp[0]:0x0	     tp[0]:0xf0193008	     tp[1]:0xf0195000
first_free_page:0xf01eb000
nfree_basemem:0x9f	     nfree_extmem:0x7e15
物理内存占用中页数:0x14c
check_page_free_list() succeeded!

************* Now check the real physical page allocator (page_alloc(), page_free(), and page_init())************
check_page_alloc() succeeded!

************* Now check page_insert, page_remove, &c **************
PTE_ADDR(kern_pgdir[PDX(va)]):0x3ff000	     kern_pgdir[PDX(va)]:0x3ff007	     ptep:0xf03ff004	     ptep1:0xf03ff000	     PTX(va):0x1
check_page() succeeded!

************* Now we set up virtual memory **************
名称:UVPT	     虚拟地址:0xef400000	     页目录项:0x3bd	     物理地址:0x192000	     物理页:0x192
名称:pages	     虚拟地址:0xf0193000	     页目录项:0x3c0	     物理地址:0x193000	     物理页:0x193
名称:envs	     虚拟地址:0xf01d3000	     页目录项:0x3c0	     物理地址:0x1d3000	     物理页:0x1d3

************* Now we map 'pages' read-only by the user at linear address UPAGES **************
page2pa(pages):0x0

************* Now we map 'envs' read-only by the user at linear address UENVS **************

************* Now use the physical memory that 'bootstack' refers to as the kernel stack **************

************* Now map all of physical memory at KERNBASE. **************

************* Now check that the initial page directory has been set up correctly **************
check_va2pa(pgdir, UPAGES + 0):0x193000	     PADDR(pages) + 0:0x193000
check_kern_pgdir() succeeded!

************* Now check that the pages on the page_free_list are reasonable. **************
first_free_page:0xf01eb000
nfree_basemem:0x9f	     nfree_extmem:0x7dd2
物理内存占用中页数:0x18f
check_page_free_list() succeeded!

************* Now check page_insert, page_remove, &c, with an installed kern_pgdir **************
check_page_installed_pgdir() succeeded!
lab2 end--------------------------------------------------------------------------------------------------

lab3 start--------------------------------------------------------------------------------------------------
idt[0]	     off:0xf0104882
idt[1]	     off:0xf0104888
idt[2]	     off:0xf010488e
idt[3]	     off:0xf0104894
idt[4]	     off:0xf010489a
idt[5]	     off:0xf01048a0
idt[6]	     off:0xf01048a6
idt[7]	     off:0xf01048ac
idt[8]	     off:0xf01048b2
idt[9]	     off:0x0
idt[10]	     off:0xf01048b6
idt[11]	     off:0xf01048ba
idt[12]	     off:0xf01048be
idt[13]	     off:0xf01048c2
idt[14]	     off:0xf01048c6
idt[15]	     off:0x0
idt[16]	     off:0xf01048ca
idt[17]	     off:0xf01048d0
idt[18]	     off:0xf01048d6
idt[19]	     off:0xf01048dc
&ts:0xf0190b80
************* Now we create a env. **************
************* Now we alloc a env. **************
************* Now we set up a env's vm. **************
UTOP:0xeec00000	     e->env_pgdor:0xf03bc000	     sizeof(pde_t):4
UTOP:0xeec00000	     utop_off:0x3bb	     e->env_pgdir + utop_off:0xf03bceec	     kern_pgdir + utop_off:f0192eec	     sizeof(pde_t) * (NPDENTRIES - utop_off)):276
************* Now we successfully set up a env's vm. **************
[00000000] new env 00001000
************* Now we load_icode about a env e. **************
************* Now we load each program segment. **************
ph->p_type:1	      ph->p_offset:0x1000	      ph->p_va:0x200000	      ph->p_pa:0x200000	      ph->p_filesz:0x4050	      ph->p_memsz:0x4050	      ph->p_flags:6	      ph->p_align:0x1000	     
begin:0x200000	     end:0x205000
begin:0x201000	     end:0x205000
begin:0x202000	     end:0x205000
begin:0x203000	     end:0x205000
begin:0x204000	     end:0x205000
ph->p_type:1	      ph->p_offset:0x6020	      ph->p_va:0x800020	      ph->p_pa:0x800020	      ph->p_filesz:0x10c0	      ph->p_memsz:0x10c0	      ph->p_flags:5	      ph->p_align:0x1000	     
begin:0x800000	     end:0x802000
begin:0x801000	     end:0x802000
ph->p_type:1	      ph->p_offset:0x8000	      ph->p_va:0x802000	      ph->p_pa:0x802000	      ph->p_filesz:0x2c	      ph->p_memsz:0x30	      ph->p_flags:6	      ph->p_align:0x1000	     
begin:0x802000	     end:0x803000
************* Now we copy each section which should load. **************
rcr3():0x192000
rcr3():0x3bc000
(void *) sectHdr->sh_addr:0x800020	     sectHdr->sh_offset:0x6020	     sectHdr->sh_size:0xe79
(void *) sectHdr->sh_addr:0x800e9c	     sectHdr->sh_offset:0x6e9c	     sectHdr->sh_size:0x244
(void *) sectHdr->sh_addr:0x802000	     sectHdr->sh_offset:0x8000	     sectHdr->sh_size:0xc
(void *) sectHdr->sh_addr:0x80200c	     sectHdr->sh_offset:0x800c	     sectHdr->sh_size:0x4
(void *) sectHdr->sh_addr:0x802010	     sectHdr->sh_offset:0x8010	     sectHdr->sh_size:0x1c
(void *) sectHdr->sh_addr:0x200000	     sectHdr->sh_offset:0x1000	     sectHdr->sh_size:0x10
(void *) sectHdr->sh_addr:0x200010	     sectHdr->sh_offset:0x1010	     sectHdr->sh_size:0x28ed
(void *) sectHdr->sh_addr:0x2028fd	     sectHdr->sh_offset:0x38fd	     sectHdr->sh_size:0x1753
************* Now we map one page for the program's initial stack. **************
begin:0xeebfd000	     end:0xeebfe000
************* Now we run a env. **************
e->env_tf.tf_cs:0x1b
Incoming TRAP frame at 0xefffffbc
Trapped from user mode.
T_SYSCALL
[00001000] user_mem_check assertion failure for va f010000c
[00001000] free env 00001000
Destroyed the only environment - nothing more to do!
Welcome to the JOS kernel monitor!
Type 'help' for a list of commands.
qemu: terminating on signal 15 from pid 19438
